// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Kanban.API.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ApplicationUser : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accessFailedCount property</summary>
        public int? AccessFailedCount { get; set; }
        /// <summary>The concurrencyStamp property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConcurrencyStamp { get; set; }
#nullable restore
#else
        public string ConcurrencyStamp { get; set; }
#endif
        /// <summary>The email property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>The emailConfirmed property</summary>
        public bool? EmailConfirmed { get; set; }
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The lockoutEnabled property</summary>
        public bool? LockoutEnabled { get; set; }
        /// <summary>The lockoutEnd property</summary>
        public DateTimeOffset? LockoutEnd { get; set; }
        /// <summary>The normalizedEmail property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NormalizedEmail { get; set; }
#nullable restore
#else
        public string NormalizedEmail { get; set; }
#endif
        /// <summary>The normalizedUserName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NormalizedUserName { get; set; }
#nullable restore
#else
        public string NormalizedUserName { get; set; }
#endif
        /// <summary>The passwordHash property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PasswordHash { get; set; }
#nullable restore
#else
        public string PasswordHash { get; set; }
#endif
        /// <summary>The phoneNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PhoneNumber { get; set; }
#nullable restore
#else
        public string PhoneNumber { get; set; }
#endif
        /// <summary>The phoneNumberConfirmed property</summary>
        public bool? PhoneNumberConfirmed { get; set; }
        /// <summary>The securityStamp property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecurityStamp { get; set; }
#nullable restore
#else
        public string SecurityStamp { get; set; }
#endif
        /// <summary>The twoFactorEnabled property</summary>
        public bool? TwoFactorEnabled { get; set; }
        /// <summary>The userName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserName { get; set; }
#nullable restore
#else
        public string UserName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Kanban.API.Client.Models.ApplicationUser"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Kanban.API.Client.Models.ApplicationUser CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Kanban.API.Client.Models.ApplicationUser();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accessFailedCount", n => { AccessFailedCount = n.GetIntValue(); } },
                { "concurrencyStamp", n => { ConcurrencyStamp = n.GetStringValue(); } },
                { "email", n => { Email = n.GetStringValue(); } },
                { "emailConfirmed", n => { EmailConfirmed = n.GetBoolValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "lockoutEnabled", n => { LockoutEnabled = n.GetBoolValue(); } },
                { "lockoutEnd", n => { LockoutEnd = n.GetDateTimeOffsetValue(); } },
                { "normalizedEmail", n => { NormalizedEmail = n.GetStringValue(); } },
                { "normalizedUserName", n => { NormalizedUserName = n.GetStringValue(); } },
                { "passwordHash", n => { PasswordHash = n.GetStringValue(); } },
                { "phoneNumber", n => { PhoneNumber = n.GetStringValue(); } },
                { "phoneNumberConfirmed", n => { PhoneNumberConfirmed = n.GetBoolValue(); } },
                { "securityStamp", n => { SecurityStamp = n.GetStringValue(); } },
                { "twoFactorEnabled", n => { TwoFactorEnabled = n.GetBoolValue(); } },
                { "userName", n => { UserName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("accessFailedCount", AccessFailedCount);
            writer.WriteStringValue("concurrencyStamp", ConcurrencyStamp);
            writer.WriteStringValue("email", Email);
            writer.WriteBoolValue("emailConfirmed", EmailConfirmed);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("lockoutEnabled", LockoutEnabled);
            writer.WriteDateTimeOffsetValue("lockoutEnd", LockoutEnd);
            writer.WriteStringValue("normalizedEmail", NormalizedEmail);
            writer.WriteStringValue("normalizedUserName", NormalizedUserName);
            writer.WriteStringValue("passwordHash", PasswordHash);
            writer.WriteStringValue("phoneNumber", PhoneNumber);
            writer.WriteBoolValue("phoneNumberConfirmed", PhoneNumberConfirmed);
            writer.WriteStringValue("securityStamp", SecurityStamp);
            writer.WriteBoolValue("twoFactorEnabled", TwoFactorEnabled);
            writer.WriteStringValue("userName", UserName);
        }
    }
}
#pragma warning restore CS0618
